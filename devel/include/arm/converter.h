// Generated by gencpp from file arm/converter.msg
// DO NOT EDIT!


#ifndef ARM_MESSAGE_CONVERTER_H
#define ARM_MESSAGE_CONVERTER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arm/coord.h>

namespace arm
{
template <class ContainerAllocator>
struct converter_
{
  typedef converter_<ContainerAllocator> Type;

  converter_()
    : object()  {
    }
  converter_(const ContainerAllocator& _alloc)
    : object(_alloc)  {
  (void)_alloc;
    }



   typedef  ::arm::coord_<ContainerAllocator>  _object_type;
  _object_type object;





  typedef boost::shared_ptr< ::arm::converter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm::converter_<ContainerAllocator> const> ConstPtr;

}; // struct converter_

typedef ::arm::converter_<std::allocator<void> > converter;

typedef boost::shared_ptr< ::arm::converter > converterPtr;
typedef boost::shared_ptr< ::arm::converter const> converterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm::converter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm::converter_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'arm': ['/home/johnnyname/arm_ws/src/arm/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arm::converter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm::converter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm::converter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm::converter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm::converter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm::converter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm::converter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1431af4482a444b26905122d6a7f3716";
  }

  static const char* value(const ::arm::converter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1431af4482a444b2ULL;
  static const uint64_t static_value2 = 0x6905122d6a7f3716ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm::converter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm/converter";
  }

  static const char* value(const ::arm::converter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm::converter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coord object\n"
"\n"
"================================================================================\n"
"MSG: arm/coord\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::arm::converter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm::converter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct converter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm::converter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm::converter_<ContainerAllocator>& v)
  {
    s << indent << "object: ";
    s << std::endl;
    Printer< ::arm::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MESSAGE_CONVERTER_H
