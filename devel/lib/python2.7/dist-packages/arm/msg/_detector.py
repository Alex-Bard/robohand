# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arm/detector.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm.msg

class detector(genpy.Message):
  _md5sum = "d1c4c6e71faa44d8334b50604b75a51c"
  _type = "arm/detector"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """coord one
coord two
coord three
coord four
coord object
int32 radius

================================================================================
MSG: arm/coord
int64 x
int64 y
"""
  __slots__ = ['one','two','three','four','object','radius']
  _slot_types = ['arm/coord','arm/coord','arm/coord','arm/coord','arm/coord','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       one,two,three,four,object,radius

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(detector, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.one is None:
        self.one = arm.msg.coord()
      if self.two is None:
        self.two = arm.msg.coord()
      if self.three is None:
        self.three = arm.msg.coord()
      if self.four is None:
        self.four = arm.msg.coord()
      if self.object is None:
        self.object = arm.msg.coord()
      if self.radius is None:
        self.radius = 0
    else:
      self.one = arm.msg.coord()
      self.two = arm.msg.coord()
      self.three = arm.msg.coord()
      self.four = arm.msg.coord()
      self.object = arm.msg.coord()
      self.radius = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10qi().pack(_x.one.x, _x.one.y, _x.two.x, _x.two.y, _x.three.x, _x.three.y, _x.four.x, _x.four.y, _x.object.x, _x.object.y, _x.radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.one is None:
        self.one = arm.msg.coord()
      if self.two is None:
        self.two = arm.msg.coord()
      if self.three is None:
        self.three = arm.msg.coord()
      if self.four is None:
        self.four = arm.msg.coord()
      if self.object is None:
        self.object = arm.msg.coord()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.one.x, _x.one.y, _x.two.x, _x.two.y, _x.three.x, _x.three.y, _x.four.x, _x.four.y, _x.object.x, _x.object.y, _x.radius,) = _get_struct_10qi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10qi().pack(_x.one.x, _x.one.y, _x.two.x, _x.two.y, _x.three.x, _x.three.y, _x.four.x, _x.four.y, _x.object.x, _x.object.y, _x.radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.one is None:
        self.one = arm.msg.coord()
      if self.two is None:
        self.two = arm.msg.coord()
      if self.three is None:
        self.three = arm.msg.coord()
      if self.four is None:
        self.four = arm.msg.coord()
      if self.object is None:
        self.object = arm.msg.coord()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.one.x, _x.one.y, _x.two.x, _x.two.y, _x.three.x, _x.three.y, _x.four.x, _x.four.y, _x.object.x, _x.object.y, _x.radius,) = _get_struct_10qi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10qi = None
def _get_struct_10qi():
    global _struct_10qi
    if _struct_10qi is None:
        _struct_10qi = struct.Struct("<10qi")
    return _struct_10qi
